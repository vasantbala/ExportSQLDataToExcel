<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="12/24/2022 7:47:02 AM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="W-PW01XEJB"
  DTS:CreatorName="GLOBAL\I569543"
  DTS:DTSID="{FE7CF4AE-83AF-4856-ACD7-8F27AF674F7B}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5035.3"
  DTS:LocaleID="1033"
  DTS:ObjectName="Package"
  DTS:PackageType="5"
  DTS:VersionBuild="22"
  DTS:VersionGUID="{1F2A9C2E-C163-45EC-A92E-3192293A860D}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3BB8711B-694D-478F-B0AD-34BAD60F2F18}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ExcelBaseFileName">
      <DTS:VariableValue
        DTS:DataType="8">Customer</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{5280004C-6356-466B-A20E-50FA33974591}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FolderPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\temp</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{74323612-94D6-4947-8207-5F3DC4CE1A17}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="RecordCntPerSheet">
      <DTS:VariableValue
        DTS:DataType="3">2</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{644DEF55-FA55-43A0-86FD-54A3B08E2C36}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="SourceConnectionName">
      <DTS:VariableValue
        DTS:DataType="8">SampleDB</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{331DE066-C055-4F92-9792-0ACFEFACBD49}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="TableName">
      <DTS:VariableValue
        DTS:DataType="8">Customer</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{9065B749-D4B0-4F21-9478-EC63ACEFF955}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_2e18585246af4700977b5bd252ed28e4"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::ExcelBaseFileName,User::FolderPath,User::RecordCntPerSheet,User::SourceConnectionName,User::TableName">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2e18585246af4700977b5bd252ed28e4.Properties.Settings.get_Default():ST_2e18585246af4700977b5bd252ed28e4.Properties.Sett" +
    "ings")]

namespace ST_2e18585246af4700977b5bd252ed28e4.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_2e18585246af4700977b5bd252ed28e4.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{C33A96FF-6291-47C2-9272-D02428D7CDBC}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_2e18585246af4700977b5bd252ed28e4</RootNamespace>
    <AssemblyName>ST_2e18585246af4700977b5bd252ed28e4</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Data.SqlClient;
using System.Security.Cryptography;
using System.Data.OleDb;
using System.Xml;
using System.Collections.Generic;
using System.Text;
using System.Linq;
#endregion

namespace ST_2e18585246af4700977b5bd252ed28e4
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here
            //string destinationExcel = "c:\\temp\\customer.xlsx";
            
            //string tableName = "Company";
            string sourceSQL = "SELECT [Id],[Name],[City],[State] FROM [dbo].[Company]";

            string excelFileName = Dts.Variables["User::ExcelBaseFileName"].Value.ToString();
            string folderPath = Dts.Variables["User::FolderPath"].Value.ToString();
            string tableName = Dts.Variables["User::TableName"].Value.ToString();
            Int32 recordCntPerSheet = (Int32)Dts.Variables["User::RecordCntPerSheet"].Value;
            string sourceConnectionName = Dts.Variables["User::SourceConnectionName"].Value.ToString();

            string destinationExcel = System.IO.Path.Combine(folderPath, $"{excelFileName}_{DateTime.Now.ToString("yyyyMMddHHmmss")}.xlsx");
            string destinationExcelConnectionString = $"Provider=Microsoft.ACE.OLEDB.12.0;Data Source={destinationExcel};Extended Properties='Excel 12.0 Xml;HDR=Yes';";

            string connectionString = Dts.Connections[sourceConnectionName].ConnectionString;
            using (SqlConnection sqlConnection = new SqlConnection(connectionString))
            using (SqlCommand cmd = sqlConnection.CreateCommand())            
            {
                cmd.CommandText = sourceSQL;
                cmd.CommandType = CommandType.Text;
                cmd.Connection = sqlConnection;
                sqlConnection.Open();

                using (SqlDataReader sourceDataReader = cmd.ExecuteReader())
                {
                    List<string> columnList = new List<string>();
                    for (int columnIndex = 0; columnIndex < sourceDataReader.FieldCount; columnIndex++)
                    {
                        columnList.Add($"{sourceDataReader.GetName(columnIndex)} varchar");
                    }

                    int currentPage = 1;
                    int currentRowsInPage = 0;

                    using (OleDbConnection connection = new OleDbConnection(destinationExcelConnectionString))
                    {

                        connection.Open();

                        //Create sheet
                        CreateNewSheet($"{tableName}_1", columnList, connection);

                        //Write data to sheet
                        while (sourceDataReader.Read())
                        {
                            //create new page if the current page is full
                            if (currentRowsInPage == recordCntPerSheet)
                            {
                                currentPage++;
                                currentRowsInPage = 0;
                                CreateNewSheet($"{tableName}_{currentPage}", columnList, connection);
                            }

                            //write single row to target
                            List<string> rowValueList = new List<string>();
                            for (int columnIndex = 0; columnIndex < sourceDataReader.FieldCount; columnIndex++)
                            {
                                rowValueList.Add($"'{sourceDataReader[columnIndex].ToString()}'");
                            }
                            string rowSql = $"insert into {tableName}_{currentPage} values({string.Join(",", rowValueList)})";
                            execCommand(connection, rowSql);
                            currentRowsInPage++;
                        }
                    }
                }
                sqlConnection.Close();
            }
            Dts.TaskResult = (int)ScriptResults.Success;
		}

        private static void CreateNewSheet(string sheetName, List<string> columnList, OleDbConnection connection)
        {
            string tableCreateSql = $"create table {sheetName} ({string.Join(", ", columnList)})";
            execCommand(connection, tableCreateSql);
        }

        static void execCommand(OleDbConnection conn, string sqlText)
        {
            using (OleDbCommand command = new OleDbCommand())
            {

                command.Connection = conn;
                command.CommandText = sqlText;
                command.ExecuteNonQuery();

            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_2e18585246af4700977b5bd252ed28e4</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_2e18585246af4700977b5bd252ed28e4</msb:DisplayName>
    <msb:ProjectId>{37CDED73-F98A-469B-8ABE-8CA2C218641E}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_2e18585246af4700977b5bd252ed28e4.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
    <msb:Breakpoint Include="fe1138f8ce3e4f819f626ebd82e1bdff">
      <msb:FileName>ScriptMain.cs</msb:FileName>
      <msb:LineNumber>168</msb:LineNumber>
      <msb:ColumnNumber>13</msb:ColumnNumber>
      <msb:Enabled>True</msb:Enabled>
      <msb:ConditionType>1</msb:ConditionType>
      <msb:Condition>
      </msb:Condition>
      <msb:Language>C#</msb:Language>
      <msb:HitCountType>1</msb:HitCountType>
      <msb:HitCountTarget>1</msb:HitCountTarget>
    </msb:Breakpoint>
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_2e18585246af4700977b5bd252ed28e4")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("SAP SE")]
[assembly: AssemblyProduct("ST_2e18585246af4700977b5bd252ed28e4")]
[assembly: AssemblyCopyright("Copyright @ SAP SE 2022")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2e18585246af4700977b5bd252ed28e4.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2e18585246af4700977b5bd252ed28e4.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_2e18585246af4700977b5bd252ed28e4.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_2e18585246af4700977b5bd252ed28e4.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_2e18585246af4700977b5bd252ed28e4.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_2e18585246af4700977b5bd252ed28e4.dll">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
1QUGAFICwgUPAEkGAAAGAH8C/QQGAOkC/QQGAMoC/QQGAHwD/QQGACYD/QQGAD8D/QQGAJYC/QQG
ALECwwMKAFoDHwQKAMMBHwQGAFIBoQQOAC4FCwcOAOwACwcOAHMFCwcGAA8AoQAOAB4FhgAOAMUA
hgAGAKgEoQQGADUCwgUGANoGoQQGAJMF9QUGAFoF6AQSAAUCWgQSAGYCWgQSAN8B0wQGABoC1QUK
AEgEHwQWAIsGWwEWAAcBWwEGABYAoQQGAPQDoQQGAPsDSQAWAKIGWwEWAKMFWwEOAMgARwUOAIcB
egAOACEFRwUOAGYFRwUGAAEAoQAGABABoQQGAI4BoQQGABwBoQQGAF8H/QQAAAAAQAAAAAAAAQAB
AAEAEAC+BBwAOQABAAEAAAAQAPwFWAZhAAEABQAAARAAlQZYBnUAAwAJAAMBAAC+BgAAWQAEAAwA
EQCtBBsBEQCzAR8BEQD3ACMBBgZyACcBVoCuBioBVoCTASoBUCAAAAAAhgDEBAYAAQBIIwAAAACR
AOEGLgEBAJQjAAAAAJEA0gA6AQQA2CMAAAAAhhi1BQYABgDgIwAAAACDGLUFBgAGAOgjAAAAAJMI
jwVBAQYAFCQAAAAAkwibAUYBBgAbJAAAAACTCKcBSwEGACMkAAAAAJYI8AZRAQcAKiQAAAAAhhi1
BQYABwAyJAAAAACRGLsFVgEHAAAAAQBIAQAAAgAwBwAAAwA8BQAAAQDOBAAAAgBLBwAAAQC9AwkA
tQUBABEAtQUGABkAtQUKACkAtQUQADEAtQUQADkAtQUQAEEAtQUQAEkAtQUQAFEAtQUQAFkAtQUQ
AGEAtQUQAGkAtQUGALkAtQUGAOEAtQUVAPEAtQUGAHEAtgY+APkAhwZDAAEBmARJAAkBswNQAMEA
8gNUAHkAUwdYAHkA8gNdABkBzAZiACEBewFqABkBzAZwAPkAngZ3ACkBmAR9ADEB3QNUAIEAtQUQ
AIEA3gCEADkBOwcQADkBgwGJAIkADwWQAEkBuQQGAIkAgQWWAAwAtQUGAFEBQAGhABkBzAZqAAwA
wQCmAFEBIQesAKEAtQUQABkB0wawAFEBmAS3ABkByQS8ABkB0wbHAFEBvADPAGEB/QEGAEkB9wEG
APkA/AYBABkBzAbXAKkAtQUGAKkADwXiADkBaAesAHEAtQUGAMEAtQUGAGkBLgHoAGkBWwfxAMkA
tQX3AOkAtQUGAAgAFAARAQgAGAAWASkAcwCRAS4ACwBpAS4AEwByAS4AGwCRAS4AIwCaAS4AKwDD
AS4AMwDDAS4AOwDJAS4AQwCaAS4ASwDVAS4AUwDDAS4AWwDyAUMAYwAWAUkAcwCRAWEAewAWAWMA
awAWARsA0wDdAAMAAQAEAAMAAACTBVoBAAC7AV8BAAD0BmQBAgAGAAMAAgAHAAUAAQAIAAUAAgAJ
AAcAmwAEgAAAAQAAAMsgL0IAAAAAAAAcAAAABAAAAAAAAAAAAAAA/wCYAAAAAAAQAAAAAAAAAAAA
AAAIAQAEAAAAAAQAAAAAAAAAAAAAAP8AegAAAAAABAAAAAAAAAAAAAAA/wChBAAAAAAQAAAAAAAA
AAAAAAAIAVMAAAAAAAAAAAABAAAABgYAAAUAAgAAAABJRW51bWVyYWJsZWAxAExpc3RgMQBJbnQz
MgBTVF8yZTE4NTg1MjQ2YWY0NzAwOTc3YjViZDI1MmVkMjhlNAA8TW9kdWxlPgBTeXN0ZW0uSU8A
TWljcm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AU3lzdGVtLkRhdGEAU3lzdGVt
LkRhdGEuT2xlRGIAbXNjb3JsaWIAU3lzdGVtLkNvbGxlY3Rpb25zLkdlbmVyaWMAUmVhZABBZGQA
T2xlRGJDb21tYW5kAGV4ZWNDb21tYW5kAENyZWF0ZUNvbW1hbmQAU3FsQ29tbWFuZABkZWZhdWx0
SW5zdGFuY2UAVmFyaWFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlwZUZy
b21IYW5kbGUAR2V0TmFtZQBzaGVldE5hbWUARGF0ZVRpbWUATWljcm9zb2Z0LlNxbFNlcnZlci5E
dHMuUnVudGltZQBDb21iaW5lAHNldF9Db21tYW5kVHlwZQBGYWlsdXJlAGdldF9DdWx0dXJlAHNl
dF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3JpcHRPYmplY3RNb2RlbEJhc2UAQXBw
bGljYXRpb25TZXR0aW5nc0Jhc2UAQ2xvc2UARGlzcG9zZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBD
b21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERl
YnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVB
dHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmli
dXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0
cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0
cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2lu
dEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlB
dHRyaWJ1dGUAZ2V0X1ZhbHVlAHZhbHVlAFN5c3RlbS5SdW50aW1lLlZlcnNpb25pbmcAZ2V0X0Nv
bm5lY3Rpb25TdHJpbmcAVG9TdHJpbmcAUGF0aABNaWNyb3NvZnQuU3FsU2VydmVyLlNjcmlwdFRh
c2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFzawBTY3JpcHRPYmplY3RN
b2RlbABTeXN0ZW0uQ29tcG9uZW50TW9kZWwAU1RfMmUxODU4NTI0NmFmNDcwMDk3N2I1YmQyNTJl
ZDI4ZTQuZGxsAGdldF9JdGVtAFN5c3RlbQBFbnVtAHJlc291cmNlTWFuAE9wZW4AU2NyaXB0TWFp
bgBKb2luAGNvbm4AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lz
dGVtLlJlZmxlY3Rpb24Ac2V0X0Nvbm5lY3Rpb24AT2xlRGJDb25uZWN0aW9uAFNxbENvbm5lY3Rp
b24AY29ubmVjdGlvbgBTeXN0ZW0uRGF0YS5Db21tb24AQ3VsdHVyZUluZm8ARGJEYXRhUmVhZGVy
AFNxbERhdGFSZWFkZXIARXhlY3V0ZVJlYWRlcgBnZXRfUmVzb3VyY2VNYW5hZ2VyAENvbm5lY3Rp
b25NYW5hZ2VyAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3RpY3MAU3lzdGVtLlJ1bnRpbWUu
Q29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUXzJlMTg1ODUyNDZhZjQ3MDA5Nzdi
NWJkMjUyZWQyOGU0LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2Rl
cwBTVF8yZTE4NTg1MjQ2YWY0NzAwOTc3YjViZDI1MmVkMjhlNC5Qcm9wZXJ0aWVzAGdldF9WYXJp
YWJsZXMAU2V0dGluZ3MAZ2V0X0Nvbm5lY3Rpb25zAFN1Y2Nlc3MAZ2V0X0R0cwBTY3JpcHRSZXN1
bHRzAENvbmNhdABGb3JtYXQAT2JqZWN0AENyZWF0ZU5ld1NoZWV0AGdldF9EZWZhdWx0AHNldF9U
YXNrUmVzdWx0AFN5c3RlbS5EYXRhLlNxbENsaWVudABnZXRfRmllbGRDb3VudABjb2x1bW5MaXN0
AHNldF9Db21tYW5kVGV4dABzcWxUZXh0AGdldF9Ob3cAZ2V0X0Fzc2VtYmx5AEV4ZWN1dGVOb25R
dWVyeQAAbVMARQBMAEUAQwBUACAAWwBJAGQAXQAsAFsATgBhAG0AZQBdACwAWwBDAGkAdAB5AF0A
LABbAFMAdABhAHQAZQBdACAARgBSAE8ATQAgAFsAZABiAG8AXQAuAFsAQwBvAG0AcABhAG4AeQBd
AAAvVQBzAGUAcgA6ADoARQB4AGMAZQBsAEIAYQBzAGUARgBpAGwAZQBOAGEAbQBlAAAhVQBzAGUA
cgA6ADoARgBvAGwAZABlAHIAUABhAHQAaAAAH1UAcwBlAHIAOgA6AFQAYQBiAGwAZQBOAGEAbQBl
AAAvVQBzAGUAcgA6ADoAUgBlAGMAbwByAGQAQwBuAHQAUABlAHIAUwBoAGUAZQB0AAA1VQBzAGUA
cgA6ADoAUwBvAHUAcgBjAGUAQwBvAG4AbgBlAGMAdABpAG8AbgBOAGEAbQBlAAADXwAAHXkAeQB5
AHkATQBNAGQAZABIAEgAbQBtAHMAcwAACy4AeABsAHMAeAAAXVAAcgBvAHYAaQBkAGUAcgA9AE0A
aQBjAHIAbwBzAG8AZgB0AC4AQQBDAEUALgBPAEwARQBEAEIALgAxADIALgAwADsARABhAHQAYQAg
AFMAbwB1AHIAYwBlAD0AAF07AEUAeAB0AGUAbgBkAGUAZAAgAFAAcgBvAHAAZQByAHQAaQBlAHMA
PQAnAEUAeABjAGUAbAAgADEAMgAuADAAIABYAG0AbAA7AEgARABSAD0AWQBlAHMAJwA7AAERIAB2
AGEAcgBjAGgAYQByAAAFXwAxAAAPewAwAH0AXwB7ADEAfQAAAycAAT9pAG4AcwBlAHIAdAAgAGkA
bgB0AG8AIAB7ADAAfQBfAHsAMQB9ACAAdgBhAGwAdQBlAHMAKAB7ADIAfQApAAADLAAAG2MAcgBl
AGEAdABlACAAdABhAGIAbABlACAAAAUgACgAAAUsACAAAAMpAABxUwBUAF8AMgBlADEAOAA1ADgA
NQAyADQANgBhAGYANAA3ADAAMAA5ADcANwBiADUAYgBkADIANQAyAGUAZAAyADgAZQA0AC4AUABy
AG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAATsXwQFoxukSvcMcnPd42BAAE
IAEBCAMgAAEFIAEBEREEIAEBDgUgAQERbSIHEw4ODggODg4RPRJBEkUSSRUSTQEOCAgIElEVEk0B
Dg4IBCAAEn0FIAASgIEGIAESgIUcAyAAHAMgAA4EAAARPQQgAQ4OBwAEDg4ODg4FAAIODg4GAAMO
Dg4OBSAAEoCVBiABEoCZHAQgABJFBiABARGAoQUgAQESQQQgABJJBRUSTQEOBCABDggFIAEBEwAD
IAAIBgADDg4cHAQgARwICgACDg4VEoCtAQ4HAAQODhwcHAMgAAIDBwEOBQABDh0OBAcBElUFIAEB
ElEIAAESgLURgLkFIAASgL0HIAIBDhKAvQi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAADBhJl
AwYSaQMGEhACBggDBhEUCwADAQ4VEk0BDhJRBgACARJRDgQAABJlBAAAEmkFAAEBEmkEAAASEAMA
AAEECAASZQQIABJpBAgAEhAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MB
CAEAAgAAAAAAKAEAI1NUXzJlMTg1ODUyNDZhZjQ3MDA5NzdiNWJkMjUyZWQyOGU0AAAFAQAAAAAL
AQAGU0FQIFNFAAAcAQAXQ29weXJpZ2h0IEAgU0FQIFNFIDIwMjIAAEkBABouTkVURnJhbWV3b3Jr
LFZlcnNpb249djQuNwEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC43
tAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2Nvcmxp
YiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1
YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAA
AABQQURQQURQtAAAANA3AAAAAAAAAAAAAOo3AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAADcNwAA
AAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAA
AAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgA
AABYQAAAMgQAAAAAAAAAAAAAMgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAA
AL0E7/4AAAEAAAABAC9CyyAAAAEAL0LLID8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAA
AQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAA
AAAAAACwBJIDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAG4DAAABADAAMAAwADAA
MAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAuAAcAAQBDAG8AbQBwAGEAbgB5
AE4AYQBtAGUAAAAAAFMAQQBQACAAUwBFAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAA
dABpAG8AbgAAAAAAUwBUAF8AMgBlADEAOAA1ADgANQAyADQANgBhAGYANAA3ADAAMAA5ADcANwBi
ADUAYgBkADIANQAyAGUAZAAyADgAZQA0AAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAA
AAAxAC4AMAAuADgAMwA5ADUALgAxADYAOQA0ADMAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABO
AGEAbQBlAAAAUwBUAF8AMgBlADEAOAA1ADgANQAyADQANgBhAGYANAA3ADAAMAA5ADcANwBiADUA
YgBkADIANQAyAGUAZAAyADgAZQA0AC4AZABsAGwAAABUABgAAQBMAGUAZwBhAGwAQwBvAHAAeQBy
AGkAZwBoAHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAEAAIABTAEEAUAAgAFMARQAgADIAMAAyADIA
AAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABlAG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBp
AGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUAAABTAFQAXwAyAGUAMQA4ADUAOAA1ADIANAA2AGEA
ZgA0ADcAMAAwADkANwA3AGIANQBiAGQAMgA1ADIAZQBkADIAOABlADQALgBkAGwAbAAAAGgAJAAB
AFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAAUwBUAF8AMgBlADEAOAA1ADgANQAyADQANgBhAGYA
NAA3ADAAMAA5ADcANwBiADUAYgBkADIANQAyAGUAZAAyADgAZQA0AAAAQgAPAAEAUAByAG8AZAB1
AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA4ADMAOQA1AC4AMQA2ADkANAAzAAAAAABGAA8A
AQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBzAGkAbwBuAAAAMQAuADAALgA4ADMAOQA1AC4AMQA2
ADkANAAzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAPw3AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
          <Breakpoint
            Enabled="True"
            File="ScriptMain.cs"
            Line="168"
            Column="13" />
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="169.333333333334,42.6666666666667"
          Id="Package\Script Task"
          TopLeft="335.115386882301,128.370962190113" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>